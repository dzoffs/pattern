# Абстрактний клас Посередника
class Mediator:
    def notify(self, sender, event):
        pass

# Конкретний клас Посередника
class ConcreteMediator(Mediator):
    def __init__(self, component1, component2):
        self._component1 = component1
        self._component1.mediator = self
        self._component2 = component2
        self._component2.mediator = self

    def notify(self, sender, event):
        if sender == self._component1:
            print(f"Посередник отримав подію від Component1: {event}")
            self._component2.handle_event(event)
        elif sender == self._component2:
            print(f"Посередник отримав подію від Component2: {event}")
            self._component1.handle_event(event)

# Компоненти, які взаємодіють через Посередника
class Component1:
    def __init__(self, mediator=None):
        self.mediator = mediator

    def do_something(self):
        print("Component1 виконує дію")
        self.mediator.notify(self, "Подія від Component1")

    def handle_event(self, event):
        print(f"Component1 обробляє подію: {event}")

class Component2:
    def __init__(self, mediator=None):
        self.mediator = mediator

    def do_something(self):
        print("Component2 виконує дію")
        self.mediator.notify(self, "Подія від Component2")

    def handle_event(self, event):
        print(f"Component2 обробляє подію: {event}")


if __name__ == '__main__':
    mediator = ConcreteMediator(Component1(), Component2())

    component1 = mediator._component1
    component2 = mediator._component2

    component1.do_something()
    component2.do_something()
